version: "3"

services:
  #####################################################################
  # This container blocks all the ads of the internets.
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    network_mode: host
    environment:
      TZ: 'America/Denver'
      WEBPASSWORD: 'CHANGEME'
    volumes:
      - '~/etc-pihole:/etc/pihole'
      - '~/etc-dnsmasq.d:/etc/dnsmasq.d'
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: always
  #####################################################################
  # This container runs Homebridge so I can use 'unofficial' devices with Apple's Home app.
  homebridge:
    container_name: homebridge
    image: oznu/homebridge:latest
    network_mode: host
    environment:
      TZ: 'America/Denver'
    volumes:
      - '~/homebridge:/homebridge'
    logging:
      driver: json-file
      options:
        max-size: '10mb'
        max-file: '5'
    restart: always
  #####################################################################
  # This container is used to spinup a light-weight RTSP server to allow the RPi Camera Module
  # to be streamed to another network device. The intent is to use this with Homebridge.
  mediamtx:
    container_name: rtsp_camera
    image: bluenviron/mediamtx:latest-rpi
    privileged: true
    network_mode: host
    # All of the different configuration options contained here:
    #   https://github.com/bluenviron/mediamtx/blob/main/mediamtx.yml
    # That are under paths: all: and start with rpiCameraXXX can be
    # configured in the Compose Environment whose variable names start
    # with MTX_PATHS_CAM_yyy. Therefore the variable rpiCameraWidth
    # variable in the mediamtx.yml configuration would be
    # MTX_PATHS_CAM_RPICAMERAWIDTH in this Docker Compose file.
    environment:
      MTX_PATHS_CAM_SOURCE: rpiCamera
      MTX_PATHS_CAM_RPICAMERAWIDTH: 1200
      MTX_PATHS_CAM_RPICAMERAHEIGHT: 800
      MTX_PATHS_CAM_RPICAMERAAFMODE: continuous # auto, manual, continuous; Only continuous seems to work as intended
    tmpfs:
      - '/dev/shm:exec'
    volumes:
      - '/run/udev:/run/udev:ro'
    restart: always
  #####################################################################
  # This container spins up a Minecraft server so my kids and I can play on the same worlds
  # This is a Geyser-variant of Minecraft so that iOS devices can join this server (since
  # the server is the Java edition).
  # https://geysermc.org
  minecraft-server:
    image: 05jchambers/legendary-minecraft-purpur-geyser:latest
    container_name: minecraft-server
    tty: true
    stdin_open: true
    ports:
      - "25565:25565"
      - "19132:19132/udp"
      - "19132:19132"
    environment:
      SERVER_NAME: "Dockerized-Minecraft-Server"
      MOTD: "Minecraft Server"
      EULA: "TRUE"
      MAX_PLAYERS: 10
      TZ: 'America/Denver'
      VERSION: '1.21.10'
      LEVEL_TYPE: "DEFAULT"
      ENABLE_RCON: "TRUE"
      RCON_PASSWORD: "CHANGEME"
      RCON_PORT: 28016
    volumes:
      - '~/minecraft:/minecraft'
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
    restart: always
  #####################################################################
  # This container spins up an instance of OctoPrint
  # It requires the ARM v7 processor or greater, meaning it will not 
  # launch on the Raspberry Pi Zero W (1st gen)
  #
  # https://hub.docker.com/r/octoprint/octoprint
  octoprint:
    container_name: octoprint  
    image: octoprint/octoprint 
    network_mode: host
    devices:
    # use `python -m serial.tools.miniterm` to see what the name is of the printer, this requires pyserial
      - /dev/ttyAMA0:/dev/ttyAMA0     
      - /dev/ttyUSB0:/dev/ttyUSB0     
      - /dev/video0:/dev/video0
    environment:
      - TZ=America/Denver
      - ENABLE_MJPG_STREAMER=true     
    volumes:
      - '~/octoprint:/octoprint'
    restart: always
  #####################################################################
  # This container spins up an instance of HomeAssistant
  # The instructions for getting this running are here:
  #   https://www.home-assistant.io/installation/raspberrypi#docker-compose
  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - ~/ha-config:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    privileged: true
    network_mode: host
