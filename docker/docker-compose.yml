services:
  #####################################################################
  # This container blocks all the ads of the internets.
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    restart: always
    network_mode: host
    environment:
      TZ: 'America/Denver'
      WEBPASSWORD: 'CHANGEME'
    volumes:
      - '~/volumes/etc-pihole:/etc/pihole'
      - '~/volumes/etc-dnsmasq.d:/etc/dnsmasq.d'
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed

  #####################################################################
  # This container runs Homebridge so I can use 'unofficial' devices with Apple's Home app.
  homebridge:
    container_name: homebridge
    image: homebridge/homebridge:latest
    restart: always
    network_mode: host
    environment:
      TZ: 'America/Denver'
    volumes:
      - '~/volumes/homebridge:/homebridge'
    logging:
      driver: json-file
      options:
        max-size: '10mb'
        max-file: '5'

  #####################################################################
  # This container is used to spinup a light-weight RTSP server to allow the RPi Camera Module
  # to be streamed to another network device. The intent is to use this with Homebridge.
  mediamtx:
    container_name: rtsp_camera
    image: bluenviron/mediamtx:latest-rpi
    restart: always
    privileged: true
    network_mode: host
    # All of the different configuration options contained here:
    #   https://github.com/bluenviron/mediamtx/blob/main/mediamtx.yml
    # That are under paths: all: and start with rpiCameraXXX can be
    # configured in the Compose Environment whose variable names start
    # with MTX_PATHS_CAM_yyy. Therefore the variable rpiCameraWidth
    # variable in the mediamtx.yml configuration would be
    # MTX_PATHS_CAM_RPICAMERAWIDTH in this Docker Compose file.
    environment:
      MTX_PATHS_CAM_SOURCE: rpiCamera
      MTX_PATHS_CAM_RPICAMERAWIDTH: 1200
      MTX_PATHS_CAM_RPICAMERAHEIGHT: 800
      MTX_PATHS_CAM_RPICAMERAAFMODE: continuous # auto, manual, continuous; Only continuous seems to work as intended
    tmpfs:
      - '/dev/shm:exec'
    volumes:
      - '/run/udev:/run/udev:ro'

  #####################################################################
  # This container spins up a Minecraft server so my kids and I can play on the same worlds
  # This is a Geyser-variant of Minecraft so that iOS devices can join this server (since
  # the server is the Java edition).
  # https://geysermc.org
  minecraft-server:
    image: 05jchambers/legendary-minecraft-purpur-geyser:latest
    container_name: minecraft-server
    restart: always
    tty: true
    stdin_open: true
    ports:
      - "25565:25565"
      - "19132:19132/udp"
      - "19132:19132"
    environment:
      SERVER_NAME: "Dockerized-Minecraft-Server"
      MOTD: "Minecraft Server"
      EULA: "TRUE"
      MAX_PLAYERS: 10
      TZ: 'America/Denver'
      VERSION: '1.21.10'
      LEVEL_TYPE: "DEFAULT"
      ENABLE_RCON: "TRUE"
      RCON_PASSWORD: "CHANGEME"
      RCON_PORT: 28016
    volumes:
      - '~/volumes/minecraft:/minecraft'
    logging:
      driver: "json-file"
      options:
        max-size: "1m"

  #####################################################################
  # This container spins up an instance of OctoPrint
  # It requires the ARM v7 processor or greater, meaning it will not 
  # launch on the Raspberry Pi Zero W (1st gen)
  #
  # https://hub.docker.com/r/octoprint/octoprint
  octoprint:
    container_name: octoprint  
    image: octoprint/octoprint 
    restart: always
    network_mode: host
    devices:
    # use `python -m serial.tools.miniterm` to see what the name is of the printer, this requires pyserial
      - /dev/ttyAMA0:/dev/ttyAMA0     
      - /dev/ttyUSB0:/dev/ttyUSB0     
      - /dev/video0:/dev/video0
    environment:
      - TZ=America/Denver
      - ENABLE_MJPG_STREAMER=true     
    volumes:
      - '~/volumets/octoprint:/octoprint'

  #####################################################################
  # Homepage is an open source, web-based console to display all of
  # the pertinent information desired.
  #
  # https://gethomepage.dev/latest/
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    restart: unless-stopped
    ports:
      - 3000:3000
    # The images and icons folders need to be mapped to /app/public/*, 
    # whereas the config needs to be mapped to /app/config
    volumes:
      - '~/volumes/homepage/config:/app/config'
      - '~/volumes/homepage/icons:/app/public/icons'
      - '~/volumes/homepage/images:/app/public/images'

  #####################################################################
  # Speedtest Tracker is an open source project which can be configured
  # to periodically test a networks internet bandwidth, complete with a
  # web interface and graphs and charts.
  #
  # This container provides functionality for one of the Homepage
  # widgets.
  speedtest-tracker:
    image: lscr.io/linuxserver/speedtest-tracker:latest
    container_name: speedtest-tracker
    restart: unless-stopped
    network_mode: bridge
    ports:
      - 8080:80
      - 8443:443
    environment:
      PUID: 1000
      PGID: 1000
      # This key can be obtained by going to: 
      #   https://speedtest-tracker.dev
      APP_KEY: 
      APP_URL: http://localhost
      # This uses a cronjob time format for how often to run the speedtest
      SPEEDTEST_SCHEDULE: "*/5 * * * *"
      # All of the timezone formats are similar to:
      #   "Country/City"
      APP_TIMEZONE: "America/New York"
      DISPLAY_TIMEZONE: "America/New York"
      # All of the formats are similar to:
      #   "y-m-d H:i"
      DATETIME_FORMAT: "y-m-d H:i" 
      CHART_DATETIME_FORMAT: "y-m-d H:i"
      DB_CONNECTION: sqlite
    volumes:
      - '~/volumes/speedtest/config:/config'
      - '~/volumes/speedtest/keys:/config/keys'

  #####################################################################
  # WireGuard is an easy to configure VPN server that can run in a 
  # docker container. WireGuard provides an iOS app which can be used
  # to connect to the VPN server if a URL is put into the configuration
  # below.
  wg-easy:
    image: ghcr.io/wg-easy/wg-easy:latest
    container_name: wireguard
    restart: unless-stopped
    volumes:
      - '~/volumes/wireguard:/etc/wireguard'
    ports:
      - "51820:51820/udp"
      - "51821:51821/tcp"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
      # - NET_RAW # ⚠️ Uncomment if using Podman 
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    environment:
      # Change Language:
      # (Supports: en, ua, ru, tr, no, pl, fr, de, ca, es, ko, vi, nl, is, pt, chs, cht, it, th, hi)
      LANG: en
      # ⚠️ Required:
      # Change this to your host's public address
      WG_HOST: mydomain.com
      # Optional:
      # Define the Web UI password to use
      # Calculate the password hash by the following command:
      # docker run -it ghcr.io/wg-easy/wg-easy wgpw THEPASSWORD
      #
      # Remove the single quotes from the output from the above command, and change all $ to $$
      # PASSWORD_HASH:  
      # PORT: 51821
      # WG_PORT: 51820
      # WG_CONFIG_PORT: 92820
      # WG_DEFAULT_ADDRESS: 10.8.0.x
      # WG_DEFAULT_DNS: 
      # Default is 1420:
      WG_MTU: 1414
      # WG_ALLOWED_IPS: 192.168.15.0/24, 10.0.1.0/24
      WG_PERSISTENT_KEEPALIVE: 25
      # WG_PRE_UP: echo "Pre Up" > /etc/wireguard/pre-up.txt
      # WG_POST_UP: echo "Post Up" > /etc/wireguard/post-up.txt
      # WG_PRE_DOWN: echo "Pre Down" > /etc/wireguard/pre-down.txt
      # WG_POST_DOWN: echo "Post Down" > /etc/wireguard/post-down.txt
      # UI_TRAFFIC_STATS: true
      # (0 Charts disabled, 1 # Line chart, 2 # Area chart, 3 # Bar chart)
      # UI_CHART_TYPE: 1

  #####################################################################
  # Uptime Kuma provides a self-hosted monitoring system for sites and 
  # servers, ports and urls. It can run in Docker and has a great UI
  # for configuration!
  uptime-kuma:
    container_name: uptime-kuma
    image: louislam/uptime-kuma:latest
    restart: unless-stopped
    volumes:
      - '~/volumes/uptime-kuma:/app/data'
    ports:
      - "3001:3001"

  #####################################################################
  # Prometheus Data Aggregator
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - '~/volumes/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
    networks:
      - 'localprom'
    ports:
      - '9090:9090'

  #####################################################################
  # Prometheus Metric Monitor Exporter
  node_exporter:
    container_name: node_exporter
    image: quay.io/prometheus/node-exporter:latest
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    volumes:
      - '/:/host:ro,rslave'

  grafana:
    container_name: grafana
    image: grafana/grafana-oss
    restart: unless-stopped
    user: '1000'
    volumes:
      - '~/volumes/grafana/storage:/var/lib/grafana'
    networks:
      - 'localprom'
    ports:
      - '3000:3000'

########################################
# Define the Networks
networks:
  localprom:
    driver: 'bridge'

