# Author: Dustin Brothers
# Description:
#   yaml playbook to build and deploy the latest kernel
---

- hosts: all
  ############################################################################
  # Variables
  vars:
    kernelMajorVersion: 6
    kernelMinorVersion: 8
    kernelPatchVersion: 1
    kernelVersion: {{ vars.kernelMajorVersion }}.{{ vars.kernelMinorVersion }}.{{ vars.kernelPatchVersion }}
    buildDir: /home/{{ ansible_ssh_user }}/kernel_build
    sourceDir: {{ vars.buildDir }}/linux-{{ vars.kernelVersion }}
  tasks:
    ############################################################################
    - name: Install build dependencies
      apt: 
        update_cache: yes
        pkg:
          - bc
          - binutils
          - bison
          - dwarves
          - flex
          - gcc
          - git
          - gnupg2
          - gzip
          - libelf-dev
          - libncurses5-dev
          - libssl-dev
          - make
          - openssl
          - pahole
          - perl-base
          - rsync
          - tar
          - xz-utils
      become: true
    ############################################################################
    - name: Make a directory to build the kernel in
      file:
        path: /home/{{ ansible_ssh_user }}/kernel_build
        state: directory
        mode: '0755'
    ############################################################################
    - name: Fetch the latest linux kernel
      get_url:
        url: https://cdn.kernel.org/pub/linux/kernel/v{{ vars.kernelMajorVersion }}.x/linux-{{ vars.kernelVersion }}.tar.xz
        dest: {{ vars.buildDir }}/linux-{{ vars.kernelVersion }}.tar.xz
    - name: Fetch the latest linux kernel pgp signature
      get_url:
        url: https://cdn.kernel.org/pub/linux/kernel/v{{ vars.kernelMajorVersion }}.x/linux-{{ vars.kernelVersion }}.tar.sign
        dest: {{ buildDir }}/linux-{{ vars.kernelVersion }}.tar.sign
    ############################################################################
    - name: Uncompress the linux kernel source
      shell:
        chdir: {{ vars.buildDir }}
        cmd: xz --decompress --force --keep linux-*.tar.xz
    ############################################################################
    - name: Fetch the kernel.org public keys
      shell:
        cmd: gpg2 --locate-keys torvalds@kernel.org gregkh@kernel.org
    ############################################################################
    - name: Verify the source
      shell:
        chdir: {{ vars.buildDir }}
        cmd: gpg2 --verify linux-*.tar.sign
    ############################################################################
    - name: Unarchive the linux kernel source
      unarchive:
        src: {{ buildDir }}/linux-{{ vars.kernelVersion }}.tar
        remote_src: true
        dest: {{ vars.buildDir }}
    ############################################################################
    ############################################################################
    ############################################################################
    - name: Copy the current kernel configuration into the build directory
      shell:
        chdir: {{ vars.sourceDir }}
        cmd: cp /boot/config-"$(uname -r)" .config
    ############################################################################
    - name: Generate the new configuration
      shell:
        chdir: {{ vars.sourceDir }}
        cmd: make olddefconfig
    ############################################################################
    - name: Update the configuration for the new kernel
      shell:
        chdir: {{ vars.sourceDir }}
        cmd: make olddefconfig
    ############################################################################
    - name: Disable module signing for debian
      shell:
        chdir: {{ vars.sourceDir }}
        cmd: {{ vars.sourceDir }}/scripts/config --file .config --disable MODULE_SIG
    ############################################################################
    - name: Append a string to the linux kernel version so I know this is a built kernel
      shell:
        chdir: {{ vars.sourceDir }}
        cmd: {{ vars.sourceDir }}/scripts/config --file .config --set-str LOCALVERSION "-bleeding"
    ############################################################################
    ############################################################################
    ############################################################################
    - name: Build the Kernel Modules and Bare Kernel
      shell:
        chdir: {{ vars.sourceDir }}
        cmd: make -j$(nproc) 2>&1 | tee make_kernel.log
    ############################################################################
    - name: Install the kernel modules
      shell:
        chdir: {{ vars.sourceDir }}
        cmd: make modules_install -j$(nproc)
      become: true
    ############################################################################
    - name: Install the kernel headers
      shell:
        chdir: {{ vars.sourceDir }}
        cmd: make headers_install
      become: true
    ############################################################################
    - name: Install the kernel dtbs, ARM and RISCV only!
      shell:
        chdir: {{ vars.sourceDir }}
        cmd: make dtbs_install
      become: true
    ############################################################################
    - name: Install the kernel
      shell:
        chdir: {{ vars.sourceDir }}
        cmd: make install
      become: true
    ############################################################################
    - name: Update grub
      shell:
        chdir: {{ vars.sourceDir }}
        cmd: grub-mkconfig -o /boot/grub/grub.cfg
      become: true
    ############################################################################
    - name: Reboot to load new kernel
      reboot:
        msg: "Rebooting machine..."
      become: true
